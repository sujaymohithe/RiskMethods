{"version":3,"sources":["components/Header/Header.js","AppConstants.js","store/actions/auth.js","store/actions/actionTypes.js","store/actions/indicatorMessage.js","containers/Auth/Auth.js","shared/utlity.js","components/IndicatorMessages/IndicatorMessage/IndicatorMessage.js","components/Sidebar/Sidebar.js","components/IndicatorMessages/IndicatorMessages.js","containers/HomeContainer.js/HomeLayout.js","components/IndicatorMessages/IndicatorMessageDetails/IndicatorMessageDetails.js","containers/Auth/Logout/Logout.js","MainRouter.js","App.js","serviceWorker.js","store/reducers/auth.js","store/reducers/indicatorMessage.js","store/store.js","index.js"],"names":["Header","props","className","href","data-test","isAuthenticated","localStorage","userId","split","CLIENT_ID","CLIENT_SECRET","API_URL","authSuccess","token","type","idToken","authFail","error","logout","removeItem","checkAuthTimeout","expirationTime","dispatch","setTimeout","authData","grant_type","client_id","appConstants","client_secret","refresh_token","axios","post","then","response","expirationDate","Date","getTime","data","expires_in","setItem","access_token","catch","err","getIndicatorMessages","indicatorMessages","list","connect","state","loading","auth","authRedirectPath","onAuth","email","password","username","actions","onSetAuthRedirectPath","path","useState","userName","setUserName","setPassword","authRedirect","to","errorMessage","onSubmit","event","preventDefault","FormGroup","controlId","FormLabel","FormControl","autoFocus","value","name","placeholder","onChange","target","Button","block","disabled","linkify","text","replace","url","IndicatorMessages","id","attributes","riskScore","parseInt","risk_score","color","hrefVal","createdDt","created_at","toLocaleDateString","toLocaleTimeString","Row","Col","sm","indicator_message_type","Badge","variant","dangerouslySetInnerHTML","__html","body","source","subject","size","Sidebar","fromRange","setFromRange","toRange","setToRange","eventChecked","setEventChecked","Form","toastr","warning","onFiterIndicatorMessages","Group","Label","Check","aria-label","checked","Control","onClick","onResetIndicatorMessages","indicatorMessagesList","indicatorMessage","messages","metaData","meta","onInitIndicatorMessages","page","isEventsChecked","config","range","get","headers","active","setActive","items","useEffect","number","total_pages","push","Pagination","Item","key","Container","map","message","index","renderMessage","length","HomeLayout","history","indicatorMessageData","messageData","onInitIndicatorMessageDetails","messageId","match","params","ProgressBar","animated","now","onLogout","MainRouter","routes","render","component","Logout","exact","onTryAutoSignup","getItem","Boolean","window","location","hostname","initialState","action","Object","assign","appReducer","combineReducers","indicatorMessagesData","__INITIAL_STATE__","store","createStore","undefined","compose","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.567ce096.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <header className=\"mainHeader\">\r\n      <div>\r\n        <a href=\"/\" data-test='Logo' className=\"logo\">RISK METHODS</a>\r\n      </div>\r\n      {\r\n        props.isAuthenticated &&\r\n        <div className=\"divProfile\">\r\n          <p className=\"logo\">Welcome {localStorage.userId && localStorage.userId.split('@')[0]}</p>\r\n          <a href=\"/logout\" className=\"logo signout\">Logout</a>\r\n        </div>\r\n      }\r\n    </header >\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","//All constants are defined here\r\nexport const AUTH_API_URL = 'https://cors-anywhere.herokuapp.com/https://stagingauth.riskmethods.net/oauth/token';\r\nexport const CLIENT_ID = 'fjHsalRElzo6JB_dvIGx6pw2p4WMT0pMjhtcW7d159Q';\r\nexport const CLIENT_SECRET = 'dSANY4dUV8cn-24WD8R9tBlWtWM70RrabWbfOne442o';\r\nexport const API_URL = 'https://cors-anywhere.herokuapp.com/https://stagingapi.riskmethods.net/v2/';\r\nexport const NO_RESULTS = 'No results, please refine your filters';\r\nexport const INVALID_CREDENTIALS = 'Please enter valid credentials';","import axios from 'axios';\r\nimport * as actionTypes from './actionTypes';\r\nimport * as appConstants from '../../AppConstants';\r\n\r\nexport const authStart = () => {\r\n    return {\r\n        type: actionTypes.AUTH_START\r\n    };\r\n};\r\n\r\nexport const authSuccess = (token, userId) => {\r\n    return {\r\n        type: actionTypes.AUTH_SUCCESS,\r\n        idToken: token,\r\n        userId: userId\r\n    };\r\n};\r\n\r\nexport const authFail = (error) => {\r\n    return {\r\n        type: actionTypes.AUTH_FAIL,\r\n        error: error\r\n    };\r\n};\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('refresh_token');\r\n    localStorage.removeItem('expirationDate');\r\n    localStorage.removeItem('userId');\r\n    return {\r\n        type: actionTypes.AUTH_LOGOUT\r\n    };\r\n};\r\n\r\nexport const checkAuthTimeout = (expirationTime) => {\r\n    return dispatch => {\r\n        setTimeout(() => {\r\n            // dispatch(logout());\r\n            const authData = {\r\n                grant_type: 'refresh_token',\r\n                client_id: appConstants.CLIENT_ID,\r\n                client_secret: appConstants.CLIENT_SECRET,\r\n                refresh_token : localStorage.refresh_token\r\n            };\r\n            let url = appConstants.AUTH_API_URL;\r\n            axios.post(url, authData)\r\n                .then(response => {\r\n                    const expirationDate = new Date(new Date().getTime() + response.data.expires_in * 1000);\r\n                    localStorage.setItem('token', response.data.access_token);\r\n                    localStorage.setItem('refresh_token', response.data.refresh_token);\r\n                    localStorage.setItem('expirationDate', expirationDate);\r\n                    localStorage.setItem('userId', localStorage.userId);\r\n                    dispatch(checkAuthTimeout(response.data.expires_in));\r\n                })\r\n                .catch(err => {\r\n                    dispatch(authFail(err.response.data.error));\r\n                });\r\n        }, (expirationTime - 180) * 1000);\r\n    };\r\n};\r\n\r\nexport const auth = (email, password) => {\r\n    return dispatch => {\r\n        dispatch(authStart());\r\n        const authData = {\r\n            grant_type: 'password',\r\n            username: email,\r\n            password: password,\r\n            client_id: appConstants.CLIENT_ID,\r\n            client_secret: appConstants.CLIENT_SECRET\r\n        };\r\n        let url = appConstants.AUTH_API_URL;\r\n        axios.post(url, authData)\r\n            .then(response => {\r\n                const expirationDate = new Date(new Date().getTime() + response.data.expires_in * 1000);\r\n                localStorage.setItem('token', response.data.access_token);\r\n                localStorage.setItem('refresh_token', response.data.refresh_token);\r\n                localStorage.setItem('expirationDate', expirationDate);\r\n                localStorage.setItem('userId', authData.username);\r\n                dispatch(authSuccess(response.data.access_token, authData.username));\r\n                dispatch(checkAuthTimeout(response.data.expires_in));\r\n            })\r\n            .catch(err => {\r\n                dispatch(authFail(err.response.data.error));\r\n            });\r\n    };\r\n};\r\n\r\nexport const setAuthRedirectPath = (path) => {\r\n    return {\r\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\r\n        path: path\r\n    };\r\n};\r\n\r\nexport const authCheckState = () => {\r\n    return dispatch => {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n            dispatch(logout());\r\n        } else {\r\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\r\n            if (expirationDate <= new Date()) {\r\n                dispatch(logout());\r\n            } else {\r\n                const userId = localStorage.getItem('userId');\r\n                dispatch(authSuccess(token, userId));\r\n                dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\r\n            }\r\n        }\r\n    };\r\n};","export const AUTH_START = 'AUTH_START';\r\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\r\nexport const AUTH_FAIL = 'AUTH_FAIL';\r\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';\r\n\r\nexport const SET_AUTH_REDIRECT_PATH = 'SET_AUTH_REDIRECT_PATH';\r\n\r\nexport const GET_INDICATOR_MESSAGES = 'GET_INDICATOR_MESSAGES';\r\nexport const FETCH_INDICATOR_MESSAGES_FAILED = 'FETCH_INDICATOR_MESSAGES_FAILED';\r\nexport const INDICATOR_MESSAGES_START = 'INDICATOR_MESSAGES_START';\r\nexport const GET_INDICATOR_MESSAGE_DETAILS = 'GET_INDICATOR_MESSAGE_DETAILS';\r\nexport const FETCH_INDICATOR_MESSAGE_DETAILS_FAILED = 'FETCH_INDICATOR_MESSAGE_DETAILS_FAILED';","import axios from 'axios';\r\nimport * as actionTypes from './actionTypes';\r\nimport * as appConstants from '../../AppConstants';\r\n\r\nexport const getIndicatorMessages = (indicatorMessages) => {\r\n    return {\r\n        type: actionTypes.GET_INDICATOR_MESSAGES,\r\n        list: indicatorMessages\r\n    };\r\n};\r\n\r\nexport const fetchIndicatorMessagesFailed = () => {\r\n    return {\r\n        type: actionTypes.FETCH_INDICATOR_MESSAGES_FAILED\r\n    };\r\n};\r\n\r\nexport const indicatorMessagesStart = () => {\r\n    return {\r\n        type: actionTypes.INDICATOR_MESSAGES_START\r\n    };\r\n};\r\n\r\nexport const InitIndicatorMessages = (page = 1, isEventsChecked, fromRange = 0, toRange = 100) => {\r\n    const config = {\r\n        'Authorization': \"Bearer \" + localStorage.token,\r\n        'content-type': 'application/json'\r\n    };\r\n    const url = !!isEventsChecked ? `${appConstants.API_URL}indicator_messages?filter[event]=true&` :\r\n        `${appConstants.API_URL}indicator_messages?`;\r\n    const range = !!isEventsChecked ? '' : (`&filter[risk_score_min]=${fromRange}&filter[risk_score_max]=${toRange}`);\r\n    return dispatch => {\r\n        dispatch(indicatorMessagesStart());\r\n        axios.get(`${url}page[size]=\r\n        20&fields[indicator_message]=name,subject,created_at,body,source,\r\n        indicator_message_type,risk_score&page[number]=${page}${range}`, {\r\n            headers: config\r\n        }).then(response => {\r\n            dispatch(getIndicatorMessages(response.data));\r\n        }).catch(error => {\r\n            dispatch(fetchIndicatorMessagesFailed());\r\n        });\r\n    };\r\n};\r\n\r\nexport const getIndicatorMessageDetails = (indicatorMessageDetails) => {\r\n    return {\r\n        type: actionTypes.GET_INDICATOR_MESSAGE_DETAILS,\r\n        data: indicatorMessageDetails\r\n    };\r\n};\r\n\r\nexport const fetchIndicatorMessageDetailsFailed = () => {\r\n    return {\r\n        type: actionTypes.FETCH_INDICATOR_MESSAGE_DETAILS_FAILED\r\n    };\r\n};\r\n\r\nexport const InitIndicatorMessageDetails = (id) => {\r\n    let config = {\r\n        'Authorization': \"Bearer \" + localStorage.token,\r\n        'content-type': 'application/json'\r\n    }\r\n    return dispatch => {\r\n        dispatch(indicatorMessagesStart());\r\n        axios.get(`${appConstants.API_URL}indicator_messages/${id}?fields[indicator_message]=risk_score,name,subject,body,created_at,body,source,indicator_message_type`, {\r\n            headers: config\r\n        }).then(response => {\r\n            dispatch(getIndicatorMessageDetails(response.data));\r\n        }).catch(error => {\r\n            dispatch(fetchIndicatorMessageDetailsFailed());\r\n        });\r\n    };\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Button, FormGroup, FormControl, FormLabel } from \"react-bootstrap\";\r\nimport './Auth.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { INVALID_CREDENTIALS } from '../../AppConstants';\r\n\r\nconst Auth = (props) => {\r\n    const [userName, setUserName] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const submitHandler = event => {\r\n        event.preventDefault();\r\n        props.onAuth(userName, password);\r\n    };\r\n\r\n    let authRedirect = null;\r\n    if (props.isAuthenticated) {\r\n        authRedirect = <Redirect to={props.authRedirectPath} />;\r\n    }\r\n\r\n    let errorMessage = null;\r\n    if (props.error) {\r\n        errorMessage = INVALID_CREDENTIALS;\r\n    }\r\n\r\n    return <div className=\"Auth\">\r\n        {authRedirect}\r\n        <div className=\"col-sm-3 ml-auto mr-auto pt-5\">\r\n            <form onSubmit={submitHandler}>\r\n                <FormGroup controlId=\"message\">\r\n                    <FormLabel className=\"danger\"><b>{errorMessage}</b></FormLabel>\r\n                </FormGroup>\r\n                <FormGroup controlId=\"username\">\r\n                    <FormLabel><b>Email address</b></FormLabel>\r\n                    <FormControl\r\n                        autoFocus\r\n                        type=\"username\"\r\n                        value={userName}\r\n                        name=\"username\"\r\n                        placeholder=\"Enter your email address\"\r\n                        onChange={event => {\r\n                            setUserName(event.target.value);\r\n                        }}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup controlId=\"password\">\r\n                    <FormLabel><b>Password</b></FormLabel>\r\n                    <FormControl\r\n                        value={password}\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        placeholder=\"Enter your password\"\r\n                        onChange={event => {\r\n                            setPassword(event.target.value);\r\n                        }}\r\n                    />\r\n                </FormGroup>\r\n                <Button\r\n                    block\r\n                    className=\"col-sm-6 offset-sm-4 mt-4\"\r\n                    type=\"submit\" disabled={props.loading}>\r\n                    {props.loading ? 'Please Wait...' : 'Login'}\r\n                </Button>\r\n            </form>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password) =>\r\n            dispatch(actions.auth(email, password)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Auth);","export const linkify = (text) => {\r\n    var urlRegex = /(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&@#/%?=~_|!:,.;]*[-A-Z0-9+&@#/%=~_|])/ig;\r\n    return text.replace(urlRegex, function (url) {\r\n        return '<a href=\"' + url + '\">' + url + '</a>';\r\n    });\r\n} ","import React from 'react';\r\nimport { Button, Row, Col, Badge } from \"react-bootstrap\";\r\nimport './IndicatorMessage.css';\r\nimport {linkify} from '../../../shared/utlity';\r\n\r\nconst IndicatorMessages = props => {\r\n    const { id, attributes } = props.data;\r\n    const riskScore = parseInt(attributes.risk_score.value);\r\n    const color = riskScore >= 0 && riskScore <= 50 ? 'success' :\r\n        (riskScore > 50 && riskScore <= 80 ? 'warning' : 'danger');\r\n    const hrefVal = `/indicator_messages/${id}`;\r\n    const createdDt = `Created on ${new Date(attributes.created_at).toLocaleDateString()}\r\n    at ${new Date(attributes.created_at).toLocaleTimeString()} by system`;\r\n\r\n    return (\r\n        <Row>\r\n            <Col sm={12}>\r\n                <div className=\"Boxwidget\">\r\n                    <div className=\"box-left\">\r\n                        <div className=\"CardLeftFooter\">\r\n                            <p>{attributes.indicator_message_type}</p>\r\n                        </div>\r\n                        <div className=\"Cardblock\">\r\n                            <h5>\r\n                                <Badge variant={color}>{riskScore}</Badge>\r\n                            </h5>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"box-right\">\r\n                        <div className=\"Cardblock\">\r\n                            <p dangerouslySetInnerHTML={{ __html: linkify(attributes.body) }} />\r\n                            <p>{createdDt}</p>\r\n                            <p>Source : {attributes.source}</p>\r\n                            <b>Indicator : {attributes.subject}</b>\r\n                        </div>\r\n                        <div className=\"CardRightFooter mb-2\">\r\n                            <Button href={hrefVal} variant=\"primary\" size=\"sm\">\r\n                                Details\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default IndicatorMessages;","import React, { useState } from 'react';\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport './Sidebar.css';\r\nimport toastr from 'toastr';\r\n\r\nconst Sidebar = props => {\r\n    const [fromRange, setFromRange] = useState(0);\r\n    const [toRange, setToRange] = useState(100);\r\n    const [eventChecked, setEventChecked] = useState(false);\r\n\r\n    const submitHandler = event => {\r\n        event.preventDefault();\r\n        if (fromRange > toRange) {\r\n            toastr.warning('Min score should be smaller than max score');\r\n        }\r\n        else {\r\n            props.onFiterIndicatorMessages(eventChecked, fromRange, toRange);\r\n        }\r\n    };\r\n\r\n    const resetHandler = () => {\r\n        setEventChecked(false);\r\n        setFromRange(0);\r\n        setToRange(100);\r\n        props.onResetIndicatorMessages();\r\n    };\r\n\r\n    return (\r\n        <div className=\"frmFilter\">\r\n            <Form onSubmit={submitHandler}>\r\n                <Form.Group controlId=\"ControlInput\">\r\n                    <Form.Label><b>EVENTS (RISK SCORE 100)</b></Form.Label>\r\n                    <Form.Check aria-label=\"option 1\" checked={eventChecked}\r\n                        onChange={event => {\r\n                            setEventChecked(event.target.checked);\r\n                        }} />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"ControlSelect\">\r\n                    <Form.Label><b>RISK SCORE</b></Form.Label>\r\n                    <Form.Group controlId=\"formRange\">\r\n                        <Form.Label>From : {fromRange}</Form.Label>\r\n                        <Form.Control type=\"range\" value={fromRange} onChange={event => {\r\n                            setFromRange(parseInt(event.target.value));\r\n                        }} />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"toRange\">\r\n                        <Form.Label>To : {toRange}</Form.Label>\r\n                        <Form.Control type=\"range\" value={toRange} onChange={event => {\r\n                            setToRange(parseInt(event.target.value));\r\n                        }} />\r\n                    </Form.Group>\r\n                </Form.Group><br /><br />\r\n                <Form.Group controlId=\"ControlSubmit\">\r\n                    <div className=\"mb-2\">\r\n                        <Button variant=\"primary\" type=\"submit\" size=\"sm\">\r\n                            Submit\r\n                        </Button>{' '}\r\n                        <Button variant=\"secondary\" size=\"sm\" onClick={resetHandler}>\r\n                            Reset\r\n                        </Button>\r\n                    </div>\r\n                </Form.Group>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;","import React, { useEffect, useState } from 'react';\r\nimport IndicatorMessage from './IndicatorMessage/IndicatorMessage';\r\nimport * as actions from '../../store/actions/index';\r\nimport { connect } from 'react-redux';\r\nimport { Container, Col, Pagination } from \"react-bootstrap\";\r\nimport Sidebar from '../Sidebar/Sidebar';\r\nimport { NO_RESULTS } from '../../AppConstants';\r\n\r\nconst IndicatorMessages = props => {\r\n    const { onInitIndicatorMessages } = props;\r\n    let [active, setActive] = useState(1);\r\n    let [fromRange, setFromRange] = useState('0');\r\n    let [toRange, setToRange] = useState('100');\r\n    let [eventChecked, setEventChecked] = useState(false);\r\n    let items = [];\r\n\r\n    useEffect(() => {\r\n        onInitIndicatorMessages();\r\n    }, [onInitIndicatorMessages]);\r\n\r\n    const renderMessage = (message, index) => {\r\n        return (\r\n            <IndicatorMessage data={message} key={index} />\r\n        )\r\n    }\r\n\r\n    const onFiterIndicatorMessages = (isEventsChecked, fromRange, toRange) => {\r\n        setActive(1);\r\n        setEventChecked(isEventsChecked);\r\n        setFromRange(fromRange);\r\n        setToRange(toRange);\r\n        onInitIndicatorMessages(1, isEventsChecked, fromRange, toRange);\r\n    }\r\n\r\n    const onResetIndicatorMessages = () => {\r\n        setActive(1);\r\n        setEventChecked(false);\r\n        setFromRange(0);\r\n        setToRange(100);\r\n        onInitIndicatorMessages(1, false, 0, 100);\r\n    }\r\n\r\n    if (props.metaData) {\r\n        for (let number = 1; number <= props.metaData.total_pages; number++) {\r\n            items.push(\r\n                <Pagination.Item key={number} active={number === active} >\r\n                    {number}\r\n                </Pagination.Item>,\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Col sm=\"3\">\r\n                <Sidebar\r\n                    onFiterIndicatorMessages={onFiterIndicatorMessages}\r\n                    onResetIndicatorMessages={onResetIndicatorMessages} />\r\n            </Col>\r\n            <Col sm=\"9\">\r\n                <Container>\r\n                    <h4>Indicator Messages</h4>\r\n                    <div className=\"floaterR\">\r\n                        <Pagination onClick={event => {\r\n                            setActive(parseInt(event.target.text));\r\n                            onInitIndicatorMessages(event.target.text,\r\n                                eventChecked, fromRange, toRange);\r\n                        }}>{items}</Pagination>\r\n                    </div>\r\n                    {props.loading && <h5>Please wait ...</h5>}\r\n\r\n                    {!props.loading && props.indicatorMessagesList &&\r\n                        props.indicatorMessagesList.data &&\r\n                        props.indicatorMessagesList.data.map((message, index) =>\r\n                            renderMessage(message, index))}\r\n\r\n                    {!props.loading && props.indicatorMessagesList &&\r\n                        props.indicatorMessagesList.data &&\r\n                        props.indicatorMessagesList.data.length === 0 &&\r\n                        <h4>{NO_RESULTS}</h4>}\r\n                </Container>\r\n            </Col>\r\n        </>\r\n    )\r\n}\r\n//export - making public to run test case\r\nexport const mapStateToProps = state => {\r\n    return {\r\n        indicatorMessagesList: state.indicatorMessage.messages,\r\n        metaData: state.indicatorMessage.messages.meta,\r\n        loading: state.indicatorMessage.loading\r\n    };\r\n};\r\n\r\nexport const mapDispatchToProps = dispatch => {\r\n    return {\r\n        onInitIndicatorMessages: (page, isEventsChecked, fromRange, toRange) =>\r\n            dispatch(actions.InitIndicatorMessages(page, isEventsChecked, fromRange, toRange))\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(IndicatorMessages);","import React from 'react';\r\nimport { Container, Row } from \"react-bootstrap\";\r\nimport IndicatorMessages from '../../components/IndicatorMessages/IndicatorMessages';\r\nimport './HomeLayout.css';\r\n\r\nconst HomeLayout = props => {\r\n    if (!props.isAuthenticated) {\r\n        props.history.push('/auth');\r\n    }\r\n\r\n    return (\r\n        <div className=\"app-body\">\r\n            <Container>\r\n                <Row className=\"justify-content-md-center\">\r\n                    {props.isAuthenticated && <IndicatorMessages />}\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeLayout;","import React, { useEffect } from 'react';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { connect } from 'react-redux';\r\nimport { Container, Row, Col, Badge, ProgressBar } from \"react-bootstrap\";\r\nimport './IndicatorMessageDetails.css';\r\nimport { linkify } from '../../../shared/utlity';\r\n\r\nconst IndicatorMessageDetails = (props) => {\r\n    if (!localStorage.token) {\r\n        props.history.push('/auth');\r\n    }\r\n    let messageId = props.match.params.id;\r\n    const { onInitIndicatorMessageDetails } = props;\r\n\r\n    useEffect(() => {\r\n        onInitIndicatorMessageDetails(messageId);\r\n    }, [onInitIndicatorMessageDetails, messageId]);\r\n\r\n    if (props.loading) {\r\n        return (\r\n            <div className=\"app-body\">\r\n                <Container>\r\n                    <Row><h5>Please Wait ...</h5></Row>\r\n                </Container>\r\n            </div>)\r\n    }\r\n    else {\r\n        const { attributes } = props.indicatorMessageData.data;\r\n        const riskScore = attributes && parseInt(attributes.risk_score.value);\r\n        const color = riskScore >= 0 && riskScore <= 50 ? 'success' :\r\n            (riskScore > 50 && riskScore <= 80 ? 'warning' : 'danger');\r\n        const createdDt = `Created on ${new Date(attributes.created_at).toLocaleDateString()}\r\n            at ${new Date(attributes.created_at).toLocaleTimeString()} by system`;\r\n\r\n        return (\r\n            <div className=\"app-body\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col sm={12}>\r\n                            <h3>Indicator Message</h3>\r\n                            <a href=\"/\" className=\"navLink\">Back to Indicator Messages</a><br /><br />\r\n                            <div className=\"Boxwidget\">\r\n                                <div className=\"box-left\">\r\n                                    <div className=\"CardLeftFooter\">\r\n                                        <p>{attributes.name}</p>\r\n                                    </div>\r\n                                    <div className=\"Cardblock\">\r\n                                        <h5>\r\n                                            <Badge variant={color}>{riskScore}</Badge>\r\n                                        </h5>\r\n                                        <h5>\r\n                                            <ProgressBar className=\"progressive\" animated variant={color} now={riskScore} />\r\n                                        </h5>\r\n                                        <h6>Risk Score already set</h6>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"box-right\">\r\n                                    <div className=\"Cardblock\">\r\n                                        <p><b>{attributes.subject}</b></p>\r\n                                        <p>{createdDt}</p>\r\n                                        <p className= \"msg-body\" dangerouslySetInnerHTML={{ __html: linkify(attributes.body) }} />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        indicatorMessageData: state.indicatorMessage.messageData,\r\n        loading: state.indicatorMessage.loading\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onInitIndicatorMessageDetails: (messageId) =>\r\n            dispatch(actions.InitIndicatorMessageDetails(messageId))\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(IndicatorMessageDetails);","import React, { useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport * as actions from '../../../store/actions/index';\n\nconst Logout = props => {\n  const { onLogout } = props;\n\n  useEffect(() => {\n    onLogout();\n  }, [onLogout]);\n\n  return <Redirect to=\"/\" />;\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onLogout: () => dispatch(actions.logout())\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Logout);\n","import React from 'react';\r\nimport { Switch, Route, BrowserRouter, Redirect } from 'react-router-dom';\r\nimport Auth from './containers/Auth/Auth';\r\nimport HomeLayout from './containers/HomeContainer.js/HomeLayout';\r\nimport IndicatorMessageDetails from './components/IndicatorMessages/IndicatorMessageDetails/IndicatorMessageDetails';\r\nimport Logout from './containers/Auth/Logout/Logout';\r\n\r\nconst MainRouter = props => {\r\n    let isAuthenticated = props.isAuthenticated;\r\n    let routes = (\r\n        <Switch>\r\n            <Route path=\"/auth\" render={props => <Auth {...props} />} />\r\n            <Route path=\"/logout\" component={Logout} />\r\n            <Route exact path=\"/\" render={props => <HomeLayout {...props} isAuthenticated={isAuthenticated} />} />\r\n            <Route path=\"/indicator_messages/:id\" render={props => <IndicatorMessageDetails {...props} isAuthenticated={isAuthenticated}/>} />\r\n            <Redirect to=\"/\" />\r\n        </Switch>\r\n    );\r\n\r\n    // if (props.isAuthenticated) {\r\n    //     routes = (\r\n    //         <Switch>\r\n    //             {/* <Route path=\"/logout\" component={Logout} /> */}\r\n    //             <Route path=\"/auth\" render={props => <Auth {...props} />} />\r\n    //             <Route path=\"/\" exact render={props => <HomeLayout {...props} isAuthenticated=\"true\"/>} />\r\n    //             <Route path=\"/indicator_messages/:id\" render={props => <IndicatorMessageDetails {...props} />} />\r\n    //             <Redirect to=\"/\" />\r\n    //         </Switch>\r\n    //     );\r\n    // }\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            {/* <Switch>\r\n                <Route exact path=\"/\" component={Auth} />\r\n                <Route path=\"/Login\" component={Auth} />\r\n            </Switch> */}\r\n            {routes}\r\n        </BrowserRouter>\r\n    )\r\n\r\n}\r\n\r\nexport default MainRouter;","import React, { useEffect } from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport MainRouter from './MainRouter';\nimport * as actions from './store/actions/index';\nimport { connect } from 'react-redux';\n\nconst App = props => {\n  const { onTryAutoSignup } = props;\n  useEffect(() => {\n    onTryAutoSignup();\n  }, [onTryAutoSignup]);\n\n\n  return (\n    <div>\n      <Header {...props} />\n      <MainRouter {...props} />\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.auth.token !== null\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTryAutoSignup: () => dispatch(actions.authCheckState())\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { AUTH_START, AUTH_SUCCESS, AUTH_FAIL, AUTH_LOGOUT, SET_AUTH_REDIRECT_PATH } from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    token: null,\r\n    userId: null,\r\n    error: null,\r\n    loading: false,\r\n    authRedirectPath: '/'\r\n};\r\n\r\nexport function auth(state = initialState, action) {\r\n    switch (action.type) {\r\n        case AUTH_START:\r\n            return Object.assign({}, state, {\r\n                error: null,\r\n                loading: true\r\n            });\r\n        case AUTH_SUCCESS:\r\n            return Object.assign({}, state, {\r\n                token: action.idToken,\r\n                userId: action.userId,\r\n                error: null,\r\n                loading: false\r\n            });\r\n        case AUTH_FAIL:\r\n            return Object.assign({}, state, {\r\n                error: action.error,\r\n                loading: false\r\n            });\r\n        case AUTH_LOGOUT:\r\n            return Object.assign({}, state, {\r\n                token: null,\r\n                userId: null\r\n            });\r\n        case SET_AUTH_REDIRECT_PATH:\r\n            return Object.assign({}, state, {\r\n                authRedirectPath: action.path\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}","import {\r\n    GET_INDICATOR_MESSAGES, FETCH_INDICATOR_MESSAGES_FAILED,\r\n    GET_INDICATOR_MESSAGE_DETAILS, FETCH_INDICATOR_MESSAGE_DETAILS_FAILED,\r\n    INDICATOR_MESSAGES_START\r\n}\r\n    from '../actions/actionTypes';\r\n\r\nexport function indicatorMessage(state = {\r\n    messages: [],\r\n    error: false,\r\n    messageData : {},\r\n    loading : true\r\n}, action) {\r\n    switch (action.type) {\r\n        case INDICATOR_MESSAGES_START:\r\n            return Object.assign({}, state, {\r\n                error: null,\r\n                loading: true\r\n            });\r\n        case GET_INDICATOR_MESSAGES:\r\n            return Object.assign({}, state, {\r\n                messages: action.list,\r\n                loading: false\r\n            });\r\n        case FETCH_INDICATOR_MESSAGES_FAILED:\r\n            return Object.assign({}, state, {\r\n                error: true,\r\n                loading: false\r\n            });\r\n        case GET_INDICATOR_MESSAGE_DETAILS:\r\n            return Object.assign({}, state, {\r\n                messageData: action.data,\r\n                loading: false\r\n            });\r\n        case FETCH_INDICATOR_MESSAGE_DETAILS_FAILED:\r\n            return Object.assign({}, state, {\r\n                error: true,\r\n                loading: false\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}","// Imports\r\nimport { compose, combineReducers } from 'redux'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\n// App Imports\r\nimport * as authData from './reducers/auth';\r\nimport * as indicatorMessagesData from './reducers/indicatorMessage';\r\n\r\n// App Reducer\r\nconst appReducer = combineReducers({\r\n    ...authData, ...indicatorMessagesData\r\n})\r\n\r\n// Root Reducer\r\nexport const rootReducer = (state, action) => {\r\n    if (action.type === 'RESET') {\r\n        state = undefined\r\n    }\r\n    return appReducer(state, action)\r\n}\r\n\r\n// Load initial state from server side\r\nlet initialState\r\nif (typeof window !== 'undefined') {\r\n    initialState = window.__INITIAL_STATE__\r\n    delete window.__INITIAL_STATE__\r\n}\r\n\r\n// Store\r\nexport const store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n\r\n    compose(\r\n        applyMiddleware(thunk),\r\n    )\r\n)\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\nimport '../node_modules/toastr/build/toastr.min.css';\n\nReactDOM.render(<Provider store={store}>\n  <App />\n</Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}